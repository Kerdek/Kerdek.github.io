let

io = #"io.cru",
arith = #"arith.cru",
logic = #"logic.cru",
stringify = #"stringify.cru",

return = io.return,
put = io.put,
add = arith.add,
sub = arith.sub,
mul = arith.mul,
div = arith.div,
lt = arith.lt,
eq = arith.eq,
if = logic.if,

fact :: Number -> Number,
exp :: Number -> Number -> Number,

fact n =
  if (eq n 0) (1 as Number) $
  mul n (fact (sub n 1)),

exp x precision =
  if (lt precision 0) (0 as Number) $
  let
    f :: Number -> Number -> Number -> Number,
    f n acc term =
      if (eq n precision) acc $
      f (add n 1) (add acc (div term (fact n))) (mul term x) in
  f 0 0 1,

in

exp